version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ethosview-postgres
    environment:
      POSTGRES_DB: ethosview
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ethosview-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ethosview-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ethosview-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ethosview-backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ethosview
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ethosview-network
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./ethosview-frontend
      dockerfile: Dockerfile
    container_name: ethosview-frontend
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8080
      - INTERNAL_API_BASE_URL=http://backend:8080
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ethosview-network

volumes:
  postgres_data:
  redis_data:

networks:
  ethosview-network:
    driver: bridge
